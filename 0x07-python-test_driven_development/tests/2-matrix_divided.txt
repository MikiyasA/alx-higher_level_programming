The ``2-matrix_divided`` module

##################################

Using ``matrix_divided`` function
----------------------------------

Importing function from the module:
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	
Divide the matrix by 3:
       >>> matrix_divided(matrix, 3)
       [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Divide the mateix by float, 3.4:
       >>> matrix_divided(matrix, 3.5)
       [[0.29, 0.57, 0.86], [1.14, 1.43, 1.71]]

Divide the matrix by 0:
       >>> matrix_divided(matrix, 0)
       Traceback (most recent call last):
       ...
       ZeroDivisionError: division by zero

Check the matrix is list of list:
      >>> matrix_divided([[1, 2, 3], 4, 5, 6], 3)
      Traceback (most recent call last):
      ...
      TypeError: matrix must be a matrix (list of lists) of integers/floats

Checks all elemebts of list int or float:
       >>> matrix_divided([[1, '2', 3], [4, 5, 'six']], 3)
       Traceback (most recent call last):
       ...
       TypeError: matrix must be a matrix (list of lists) of integers/floats

Check row of the martix is equal:
      >>> matrix_divided([[1, 2], [3, 4, 5], [6]], 3)
      Traceback (most recent call last):
      ...
      TypeError: Each row of the matrix must have the same size

Check div is number:
      >>> matrix_divided(matrix, "ten")
      Traceback (most recent call last):
      ...
      TypeError: div must be a number

